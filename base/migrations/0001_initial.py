# Generated by Django 3.0.6 on 2020-05-27 18:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='AfishaCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=75)),
                ('name_en', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'city',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_en', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'country',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaGenre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60)),
                ('name_en', models.CharField(max_length=60)),
            ],
            options={
                'db_table': 'genre',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaHall',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
            ],
            options={
                'db_table': 'hall',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaHalls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('places', models.IntegerField()),
                ('format', models.IntegerField()),
            ],
            options={
                'db_table': 'halls',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaMetro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=60)),
            ],
            options={
                'db_table': 'metro',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=100)),
                ('content', models.TextField(blank=True)),
                ('annotation', models.CharField(blank=True, default='', max_length=255)),
                ('type', models.IntegerField()),
                ('object_type', models.IntegerField()),
                ('ip', models.CharField(blank=True, default='', max_length=12)),
                ('read_all', models.IntegerField(default=0)),
                ('read_yes', models.IntegerField(default=0)),
                ('read_no', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'news',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaPersons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_year', models.IntegerField()),
                ('birth_mounth', models.IntegerField()),
                ('birth_day', models.IntegerField()),
                ('male', models.IntegerField()),
                ('national', models.IntegerField()),
                ('imdb', models.IntegerField()),
            ],
            options={
                'db_table': 'persons',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaPersonsName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
                ('name_cross', models.CharField(max_length=63)),
                ('flag', models.IntegerField()),
            ],
            options={
                'db_table': 'persons_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AfishaSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price1', models.IntegerField()),
                ('price2', models.IntegerField()),
                ('kinohod', models.IntegerField()),
            ],
            options={
                'db_table': 'session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckEditors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('action', models.IntegerField()),
                ('date', models.DateTimeField()),
                ('start', models.TextField()),
                ('finish', models.TextField()),
                ('status', models.IntegerField()),
                ('check', models.IntegerField()),
                ('rem', models.TextField()),
                ('object_id', models.IntegerField()),
                ('money', models.FloatField()),
                ('user_ip', models.CharField(max_length=12)),
            ],
            options={
                'db_table': 'check_editors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('name_en', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'company',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Extres',
            fields=[
                ('extresid', models.IntegerField(db_column='ExtResID', primary_key=True, serialize=False)),
                ('mimetype', models.CharField(db_column='MimeType', max_length=120)),
                ('filename', models.CharField(db_column='FileName', max_length=300)),
                ('filepath', models.CharField(db_column='FilePath', max_length=750)),
                ('content', models.TextField(db_column='Content')),
                ('info', models.TextField(db_column='Info')),
            ],
            options={
                'db_table': 'ExtRes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=300)),
                ('original_title', models.CharField(blank=True, max_length=300)),
                ('year', models.CharField(blank=True, max_length=60)),
                ('site', models.CharField(max_length=300)),
                ('director1', models.IntegerField()),
                ('director2', models.IntegerField()),
                ('director3', models.IntegerField()),
                ('imdb', models.CharField(blank=True, max_length=60)),
                ('imdb_votes', models.IntegerField()),
                ('actor1', models.IntegerField(blank=True, null=True)),
                ('actor2', models.IntegerField(blank=True, null=True)),
                ('actor3', models.IntegerField(blank=True, null=True)),
                ('actor4', models.IntegerField(blank=True, null=True)),
                ('actor5', models.IntegerField(blank=True, null=True)),
                ('actor6', models.IntegerField(blank=True, null=True)),
                ('runtime', models.CharField(blank=True, max_length=150)),
                ('limits', models.CharField(blank=True, max_length=150)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('trailers', models.TextField()),
                ('idalldvd', models.IntegerField(blank=True, db_column='IdAllDVD', null=True)),
                ('datelastupd', models.DateTimeField(db_column='DateLastUpd')),
            ],
            options={
                'db_table': 'film',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmExtData',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('rate1', models.IntegerField()),
                ('rate2', models.IntegerField()),
                ('rate3', models.IntegerField()),
                ('rate', models.FloatField()),
                ('vnum', models.IntegerField()),
                ('opinions', models.CharField(max_length=2)),
            ],
            options={
                'db_table': 'film_ext_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmsCodes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.TextField(blank=True, db_column='player', null=True)),
            ],
            options={
                'db_table': 'films_codes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmsName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=127)),
                ('type', models.IntegerField()),
                ('status', models.IntegerField()),
                ('hide', models.CharField(max_length=6)),
                ('slug', models.CharField(max_length=127)),
            ],
            options={
                'db_table': 'films_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmSound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.IntegerField()),
            ],
            options={
                'db_table': 'films_sound',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmSoundType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sound_type', models.CharField(max_length=63)),
            ],
            options={
                'db_table': 'films_sound_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmsRamb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_source', models.IntegerField(db_column='id_source', null=True)),
                ('id_out', models.IntegerField(db_column='id_out', null=True)),
            ],
            options={
                'db_table': 'films_ramb',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FilmVotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_1', models.IntegerField()),
                ('rate_2', models.IntegerField()),
                ('rate_3', models.IntegerField()),
            ],
            options={
                'db_table': 'films_votes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Gathering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_num', models.IntegerField(db_column='week_num')),
                ('friday_date', models.DateField(db_column='friday_date')),
                ('sunday_date', models.DateField(db_column='sunday_date')),
                ('place', models.IntegerField(db_column='place')),
                ('period_gathering', models.IntegerField(db_column='period_gathering')),
                ('total_gathering', models.IntegerField(db_column='total_gathering')),
                ('date_from', models.IntegerField(db_column='date_from')),
                ('date_to', models.IntegerField(db_column='date_to')),
                ('day_in_rent', models.IntegerField(db_column='day_in_rent')),
            ],
            options={
                'db_table': 'gathering',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GGOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.IntegerField()),
                ('branch_id', models.IntegerField()),
                ('date', models.DateTimeField()),
                ('text', models.TextField()),
                ('subject', models.CharField(max_length=255)),
                ('email', models.CharField(max_length=50)),
                ('nick', models.CharField(max_length=25)),
                ('first', models.IntegerField()),
                ('type_obj', models.IntegerField()),
                ('locked', models.IntegerField()),
                ('type', models.IntegerField()),
                ('deleted', models.IntegerField()),
                ('obj_id', models.IntegerField()),
                ('ip', models.CharField(max_length=15)),
            ],
            options={
                'db_table': 'gg_opinion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ImpLoad',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.IntegerField()),
                ('url', models.CharField(max_length=256)),
            ],
            options={
                'db_table': 'imp_load',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ImportCinema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cinema_id', models.IntegerField(db_column='Cinema_ID')),
                ('cinema_name', models.CharField(db_column='Cinema_Name', max_length=80)),
                ('script_id', models.IntegerField(db_column='Script_ID')),
                ('text_ord', models.TextField(db_column='Text_Ord')),
                ('sms_word', models.CharField(db_column='sms_word', max_length=31)),
            ],
            options={
                'db_table': 'import_cinema',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('ind', models.CharField(max_length=18)),
                ('address', models.CharField(max_length=150)),
                ('phones', models.TextField()),
                ('fax', models.CharField(max_length=150)),
                ('mail', models.CharField(max_length=240)),
                ('director', models.CharField(max_length=150)),
                ('kontakt1', models.CharField(max_length=150)),
                ('kontakt2', models.CharField(max_length=150)),
                ('path', models.TextField()),
                ('site', models.CharField(max_length=600)),
                ('techinfo', models.TextField()),
                ('workingtime', models.TextField()),
                ('comment', models.TextField()),
                ('access', models.IntegerField()),
                ('random', models.IntegerField(unique=True)),
                ('tech_comment', models.TextField()),
                ('longitude', models.FloatField()),
                ('latitude', models.FloatField()),
            ],
            options={
                'db_table': 'movie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MovieExtData',
            fields=[
                ('id', models.IntegerField(db_column='id', primary_key=True, serialize=False)),
                ('rate1', models.IntegerField()),
                ('rate2', models.IntegerField()),
                ('rate3', models.IntegerField()),
                ('rate', models.FloatField()),
                ('vnum', models.IntegerField()),
                ('opinions', models.TextField()),
            ],
            options={
                'db_table': 'movie_ext_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Objxres',
            fields=[
                ('objxresid', models.AutoField(db_column='ObjXResID', primary_key=True, serialize=False)),
                ('objtypeid', models.IntegerField(db_column='ObjTypeID')),
                ('objpkvalue', models.IntegerField(db_column='ObjPKValue')),
            ],
            options={
                'db_table': 'ObjXRes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonsHide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('type', models.IntegerField()),
                ('imdb', models.IntegerField()),
            ],
            options={
                'db_table': 'persons_hide',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonsRelationFilms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'persons_relation_films',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonsStatusAct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_act', models.CharField(max_length=31)),
            ],
            options={
                'db_table': 'persons_status_act',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonsTypeAct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_act', models.CharField(max_length=31)),
            ],
            options={
                'db_table': 'persons_type_act',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Pictures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField()),
                ('object_type', models.IntegerField()),
                ('face_picture', models.CharField(max_length=150)),
                ('photos', models.TextField()),
            ],
            options={
                'db_table': 'pictures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Prokat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=511)),
                ('phone', models.CharField(max_length=63)),
                ('url', models.CharField(max_length=127)),
                ('mail', models.CharField(max_length=63)),
                ('comment', models.TextField()),
            ],
            options={
                'db_table': 'prokat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(blank=True, default='', max_length=150)),
                ('lastname', models.CharField(blank=True, default='', max_length=150)),
                ('email', models.CharField(blank=True, default='', max_length=300)),
                ('password', models.CharField(default='000000000000', max_length=90)),
                ('access_level', models.IntegerField(default=0)),
                ('date_registration', models.DateField(auto_now_add=True)),
                ('country', models.IntegerField(default=0)),
                ('city', models.IntegerField(default=0)),
                ('sex', models.CharField(blank=True, default='', max_length=3)),
                ('date_of_birth', models.DateField(default='0000-00-00')),
                ('profession', models.IntegerField(default=0)),
                ('organization', models.IntegerField(default=0)),
                ('status', models.IntegerField(default=0)),
                ('salt', models.CharField(default='000000000000', max_length=36)),
                ('nickname', models.CharField(max_length=90)),
                ('pass_text', models.CharField(default='!1#1!2#1!3#январь', max_length=765)),
                ('movie', models.IntegerField(default=0)),
                ('other', models.CharField(blank=True, default='', max_length=189)),
                ('type_org', models.IntegerField(default=0)),
                ('type_m', models.IntegerField(default=0)),
                ('type_reg', models.IntegerField(default=0)),
                ('person_id', models.IntegerField(default=0)),
                ('rule', models.IntegerField(default=0)),
                ('lastgname', models.CharField(blank=True, default='', max_length=150)),
                ('last_visit', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'registered_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField()),
                ('date_to', models.DateField()),
                ('autor', models.IntegerField()),
                ('user_id', models.IntegerField()),
            ],
            options={
                'db_table': 'schedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SessionList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField()),
                ('time', models.TextField()),
            ],
            options={
                'db_table': 'session_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Seti',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='Name', max_length=150)),
            ],
            options={
                'db_table': 'Seti',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TrailerInfo',
            fields=[
                ('trailer_id', models.IntegerField(db_column='TrailerID', primary_key=True, serialize=False)),
                ('group_id', models.IntegerField(db_column='GroupID')),
                ('date', models.DateField(db_column='Date')),
                ('size_w', models.IntegerField(db_column='Size_W')),
                ('size_h', models.IntegerField(db_column='Size_H')),
                ('runtime', models.IntegerField(db_column='RunTime')),
                ('cmt', models.TextField(blank=True, db_column='Cmt')),
                ('cmt_group', models.TextField(db_column='Cmt_Group')),
                ('file_ext', models.CharField(blank=True, db_column='FileExt', max_length=5)),
                ('code', models.CharField(db_column='Code', max_length=1023)),
            ],
            options={
                'db_table': 'TrailerInfo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WFOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent', models.IntegerField(db_column='parent_id', default=0)),
                ('branch', models.IntegerField(db_column='branch_id', default=0)),
                ('date', models.DateTimeField(auto_now_add=True, db_column='date')),
                ('text', models.TextField(db_column='text')),
                ('subject', models.CharField(db_column='subject', default='', max_length=255)),
                ('email', models.CharField(db_column='email', default='', max_length=50)),
                ('nick', models.CharField(db_column='nick', default='', max_length=25)),
                ('first', models.BooleanField(db_column='first', default=False)),
                ('type_obj', models.IntegerField(db_column='type_obj', default=1)),
                ('locked', models.BooleanField(db_column='locked', default=False)),
                ('type', models.IntegerField(db_column='type', default=0)),
                ('deleted', models.BooleanField(db_column='deleted', default=False)),
                ('anonim', models.BooleanField(db_column='anonim', default=False)),
                ('other', models.CharField(db_column='other', default='0000000', max_length=8)),
            ],
            options={
                'db_table': 'wf_opinion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WFStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opinion', models.IntegerField(db_column='opinion_id', default=0)),
                ('count', models.IntegerField(db_column='count', default=0)),
                ('date', models.DateTimeField(auto_now_add=True, db_column='date')),
            ],
            options={
                'db_table': 'wf_stat',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WFUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.IntegerField(db_column='user_id', default=0)),
                ('opinion', models.IntegerField(db_column='opinion_id', default=0)),
                ('date', models.DateTimeField(auto_now_add=True, db_column='date')),
            ],
            options={
                'db_table': 'wf_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Accounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.CharField(blank=True, max_length=256, null=True, verbose_name='Логин (id или email)')),
                ('validation_code', models.CharField(blank=True, max_length=256, null=True, verbose_name='Код авторизации')),
                ('email', models.CharField(blank=True, db_index=True, max_length=256, null=True, verbose_name='email аккаунта, если есть')),
                ('auth_status', models.BooleanField(default=False, verbose_name='Авторизован ли по этому аккаунту')),
                ('nickname', models.CharField(blank=True, max_length=100, null=True, verbose_name='Никнэйм')),
                ('fullname', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя Фамилия')),
                ('born', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('male', models.IntegerField(blank=True, null=True, verbose_name='Пол')),
                ('avatar', models.CharField(blank=True, max_length=128, null=True, verbose_name='Название аватарки')),
            ],
            options={
                'db_table': 'base_accounts',
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Тип участия персоны')),
            ],
        ),
        migrations.CreateModel(
            name='ActionsPriceList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Действие')),
                ('price', models.FloatField(verbose_name='Цена')),
                ('price_edit', models.FloatField(null=True, verbose_name='Цена редактирования')),
                ('price_delete', models.FloatField(null=True, verbose_name='Цена удаления')),
                ('allow', models.BooleanField(default=False, verbose_name='Учитывать')),
                ('group', models.CharField(choices=[('0', 'Другое'), ('1', 'Организация'), ('2', 'Персона'), ('3', 'Фильм'), ('4', 'Меню'), ('5', 'ПодМеню'), ('6', 'Блог'), ('7', 'Галерея'), ('8', 'Работа'), ('9', 'События'), ('10', 'Клиенты'), ('11', 'Реклама')], default='0', max_length=2, verbose_name='Группа дейсвий')),
            ],
            options={
                'db_table': 'base_actionspricelist',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('slug', models.CharField(max_length=256, verbose_name='Очищенное название')),
            ],
        ),
        migrations.CreateModel(
            name='Awards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(null=True, verbose_name='Год')),
                ('type', models.CharField(choices=[('1', 'Номинация'), ('2', 'Награда')], max_length=1, verbose_name='Тип')),
            ],
            options={
                'db_table': 'base_awards',
            },
        ),
        migrations.CreateModel(
            name='AwardsNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_en', models.CharField(blank=True, max_length=256, null=True, verbose_name='Англ. название')),
                ('name_ru', models.CharField(blank=True, max_length=256, null=True, verbose_name='Русс. название')),
            ],
            options={
                'db_table': 'base_awardsnames',
            },
        ),
        migrations.CreateModel(
            name='BookerCinemas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('0', 'Только чтение'), ('1', 'Чтение и запись')], max_length=1, verbose_name='Права')),
            ],
            options={
                'db_table': 'base_bookercinemas',
            },
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('budget', models.BigIntegerField(verbose_name='Количество денег')),
                ('currency', models.CharField(choices=[('1', 'USD'), ('2', 'EUR'), ('3', 'AUD'), ('4', 'RUB'), ('5', 'UAH'), ('6', 'NZD')], max_length=1, verbose_name='Валюта')),
            ],
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=8, null=True, verbose_name='Дом')),
                ('path', models.TextField(blank=True, null=True, verbose_name='Путь')),
            ],
        ),
        migrations.CreateModel(
            name='CarrierLayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Тип(слойность) двд диска')),
            ],
        ),
        migrations.CreateModel(
            name='CarrierRipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Тип РИПА на трекере')),
            ],
        ),
        migrations.CreateModel(
            name='CarrierTapeCategorie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Техническая категория кинопленки')),
            ],
        ),
        migrations.CreateModel(
            name='CarrierType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Тип носителя')),
            ],
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Название улицы')),
                ('number_housing', models.IntegerField(blank=True, null=True, verbose_name='Номер корпуса')),
                ('number_hous', models.CharField(blank=True, max_length=16, null=True, verbose_name='Номер дома')),
                ('letter_housing', models.CharField(blank=True, max_length=1, null=True, verbose_name='Буква корпуса')),
                ('zip', models.CharField(blank=True, max_length=6, null=True, verbose_name='Почтовый индекс кинотеатра')),
                ('opening', models.DateTimeField(blank=True, null=True, verbose_name='Дата открытия')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Примечания')),
                ('code', models.IntegerField(db_index=True, verbose_name='Идентификатор киноафиши')),
            ],
            options={
                'db_table': 'base_cinema',
            },
        ),
        migrations.CreateModel(
            name='CinemaCircuit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название сети кинотеатров')),
                ('kid', models.BigIntegerField(null=True, verbose_name='ID города у источника')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_code', models.IntegerField(blank=True, null=True, verbose_name='Телефонный код города')),
                ('kid', models.BigIntegerField(verbose_name='ID города у источника')),
            ],
        ),
        migrations.CreateModel(
            name='Composition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtime', models.CharField(max_length=16, null=True, verbose_name='Хронометраж')),
                ('year', models.IntegerField(null=True, verbose_name='Год релиза')),
                ('notes', models.TextField(blank=True, null=True)),
                ('tablature', models.TextField(blank=True, null=True)),
                ('source_id', models.CharField(max_length=256, null=True, verbose_name='ID источника')),
            ],
            options={
                'db_table': 'base_composition',
            },
        ),
        migrations.CreateModel(
            name='CompositionName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(verbose_name='Статус')),
                ('name', models.CharField(max_length=256, verbose_name='Имя персоны')),
            ],
            options={
                'db_table': 'base_compositionname',
            },
        ),
        migrations.CreateModel(
            name='CompositionPersonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Тип')),
            ],
            options={
                'db_table': 'base_compositionpersontype',
            },
        ),
        migrations.CreateModel(
            name='CompositionTrackTmp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=256)),
                ('error', models.BooleanField()),
            ],
            options={
                'db_table': 'base_compositiontracktmp',
            },
        ),
        migrations.CreateModel(
            name='CopyFilmAddValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='доп.свойства издания (копии) типа “эконом” или “подарочный” или “региональный” или “комплект”')),
            ],
        ),
        migrations.CreateModel(
            name='CopyFilmFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Формат изображения')),
            ],
        ),
        migrations.CreateModel(
            name='CopyFilmType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Тип копии')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Страна')),
                ('name_en', models.CharField(max_length=64, verbose_name='Англ. название страны для GeoIP')),
                ('kid', models.BigIntegerField(verbose_name='ID города у источника')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Demonstration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('time', models.DateTimeField(verbose_name='Дата, время сеанса')),
            ],
            options={
                'db_table': 'base_demonstration',
            },
        ),
        migrations.CreateModel(
            name='Distributors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iid', models.BigIntegerField(blank=True, null=True, verbose_name='Идентификатор прокатчика на imdb')),
                ('kid', models.BigIntegerField(blank=True, null=True, verbose_name='Идентификатор прокатчика на киноафише')),
                ('usa', models.BooleanField(default=False, verbose_name='США')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
            ],
            options={
                'db_table': 'base_distributors',
            },
        ),
        migrations.CreateModel(
            name='EmailNotice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=256, verbose_name='e-mail')),
                ('count', models.IntegerField(default=0, verbose_name='Кол-во сообщений')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Время отправления')),
                ('type', models.IntegerField(verbose_name='Тип сообщения')),
            ],
            options={
                'db_table': 'base_emailnotice',
            },
        ),
        migrations.CreateModel(
            name='FestCompetition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_en', models.CharField(max_length=256, verbose_name='Англ. название')),
                ('name_ru', models.CharField(max_length=256, verbose_name='Русс. название')),
                ('type', models.CharField(choices=[('1', 'Конкурс'), ('2', 'Фестиваль')], max_length=1, verbose_name='Тип')),
            ],
            options={
                'db_table': 'base_festcompetition',
            },
        ),
        migrations.CreateModel(
            name='Films',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Год')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Аннотация')),
                ('type', models.CharField(choices=[('I', 'игровой'), ('A', 'анимационный'), ('D', 'документальный'), ('R', 'рекламный'), ('M', 'музыкальный')], max_length=1, null=True, verbose_name='Тип фильма')),
                ('runtime', models.IntegerField(null=True, verbose_name='Хронометраж')),
                ('rated', models.IntegerField(null=True, verbose_name='Аудитория')),
                ('imdb_id', models.IntegerField(db_index=True, null=True, verbose_name='IMDb идентификатор')),
                ('imdb_rate', models.FloatField(null=True, verbose_name='IMDb рейтинг')),
                ('imdb_votes', models.IntegerField(null=True, verbose_name='IMDb кол-во голосов')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='ID киноафиши')),
                ('generated', models.BooleanField(default=False, verbose_name='Сгенерирован юзером через кнопку')),
                ('generated_dtime', models.DateTimeField(null=True, verbose_name='Дата, время генерации')),
                ('site', models.CharField(max_length=300, null=True)),
                ('limits', models.CharField(max_length=100, null=True)),
                ('description', models.TextField(max_length=3000, null=True)),
                ('comment', models.TextField(max_length=3000, null=True)),
                ('budget', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Budget', verbose_name='Бюджет')),
                ('country', models.ManyToManyField(to='base.Country')),
            ],
            options={
                'db_table': 'base_films',
            },
        ),
        migrations.CreateModel(
            name='FilmsBudget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(verbose_name='KID')),
                ('budget', models.CharField(max_length=64, verbose_name='Бюджет')),
            ],
            options={
                'db_table': 'base_filmsbudget',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Жанр ru')),
                ('name_en', models.CharField(max_length=64, null=True, verbose_name='Жанр en')),
                ('kid', models.BigIntegerField(null=True, verbose_name='KID жанра')),
            ],
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Номер зала')),
                ('seats', models.IntegerField(blank=True, null=True, verbose_name='Число мест в зале')),
                ('screen_size_w', models.IntegerField(blank=True, null=True, verbose_name='Ширина экрана')),
                ('screen_size_h', models.IntegerField(blank=True, null=True, verbose_name='Высота экрана')),
                ('image_format', models.CharField(blank=True, choices=[('O', '4:3'), ('S', '16:9'), ('A', 'IMAX')], max_length=1, verbose_name='Формат экрана')),
                ('sound_format', models.CharField(blank=True, choices=[('1', '1.0'), ('2', '2.0'), ('5', '5.1'), ('7', '7.1')], max_length=1, verbose_name='Формат звука')),
                ('max_price', models.IntegerField(blank=True, null=True, verbose_name='Максимальная цена билета')),
                ('min_price', models.IntegerField(blank=True, null=True, verbose_name='Минимальная цена билета')),
                ('kid', models.IntegerField(db_index=True, verbose_name='Идентификатор киноафиши')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Cinema', verbose_name='Кинотеатр')),
            ],
            options={
                'db_table': 'base_hall',
            },
        ),
        migrations.CreateModel(
            name='ImageParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dimension', models.CharField(choices=[('2', 'плоское'), ('3', 'объемное'), ('9', 'смешанное')], max_length=1, verbose_name='Число измерений')),
                ('color', models.CharField(choices=[('C', 'цветное'), ('B', 'чернобелое'), ('9', 'смешанное')], max_length=1, verbose_name='Цветность')),
                ('aspect_ratio', models.CharField(choices=[('O', '4:3'), ('S', '16:9'), ('A', 'IMAX')], max_length=1, verbose_name='Пропорции')),
            ],
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.CharField(max_length=256)),
                ('status', models.CharField(choices=[('0', 'Постер основной'), ('1', 'Постер второстепенный'), ('2', 'Слайд/Кадр')], max_length=1, verbose_name='Статус изображения')),
            ],
            options={
                'db_table': 'base_images',
            },
        ),
        migrations.CreateModel(
            name='ImportSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=256, verbose_name='url источника')),
                ('source', models.CharField(max_length=64, verbose_name='Название источника')),
                ('code', models.IntegerField(blank=True, null=True, verbose_name='Код источника')),
                ('dump', models.CharField(max_length=64, null=True, verbose_name='Название для дампов')),
            ],
            options={
                'db_table': 'base_importsources',
            },
        ),
        migrations.CreateModel(
            name='IntegralRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('afisha_id', models.IntegerField(db_index=True, null=True)),
                ('i_rate', models.FloatField(null=True)),
                ('trouble', models.CharField(max_length=50, null=True)),
                ('imdb', models.FloatField(null=True)),
                ('reviews', models.FloatField(null=True)),
                ('rotten', models.FloatField(null=True)),
            ],
            options={
                'db_table': 'base_integralrating',
            },
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('platform', models.CharField(blank=True, max_length=64, null=True, verbose_name='Операционная система')),
                ('browser', models.CharField(blank=True, max_length=64, null=True, verbose_name='Интернет браузер')),
                ('display', models.CharField(blank=True, max_length=12, null=True, verbose_name='Разрешение экрана')),
                ('timezone', models.CharField(blank=True, max_length=64, null=True, verbose_name='Часовой пояс')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город')),
            ],
            options={
                'db_table': 'base_interface',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Язык')),
                ('code', models.CharField(max_length=8, verbose_name='Код')),
            ],
        ),
        migrations.CreateModel(
            name='LetsGetBank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('account', models.CharField(max_length=64)),
                ('subdomain', models.CharField(max_length=128, null=True)),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'db_table': 'base_letsgetbank',
            },
        ),
        migrations.CreateModel(
            name='LetsGetCalendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Event Name')),
                ('event_place', models.CharField(max_length=256, null=True, verbose_name='Event Place')),
                ('dtime', models.DateTimeField(db_index=True, verbose_name='Event DateTime')),
                ('sms', models.BooleanField(default=False, verbose_name='Notify Clients by SMS')),
                ('email', models.BooleanField(default=False, verbose_name='Notify Clients by E-mail')),
                ('start_notify_sms', models.CharField(choices=[('1', 'за 5 минут'), ('2', 'за 15 минут'), ('3', 'за 30 минут'), ('4', 'за 1 час'), ('5', 'за 2 часа'), ('6', 'за 3 часа'), ('7', 'за 4 часа'), ('8', 'за 5 часов'), ('9', 'за 1 сутки')], default=4, max_length=2, verbose_name='Start Notify SMS')),
                ('start_notify_email', models.CharField(choices=[('1', 'за 5 минут'), ('2', 'за 15 минут'), ('3', 'за 30 минут'), ('4', 'за 1 час'), ('5', 'за 2 часа'), ('6', 'за 3 часа'), ('7', 'за 4 часа'), ('8', 'за 5 часов'), ('9', 'за 1 сутки')], default=4, max_length=2, verbose_name='Start Notify E-mail')),
                ('start_notify_sms_dtime', models.DateTimeField(null=True)),
                ('start_notify_email_dtime', models.DateTimeField(null=True)),
                ('type', models.CharField(choices=[('1', 'Nursing Home, $150'), ('2', 'Corporate, $250'), ('3', 'Gig, $100'), ('4', 'School, $150')], default=1, max_length=1, verbose_name='Type')),
                ('price', models.CharField(blank=True, max_length=16, null=True, verbose_name='Price')),
                ('subdomain', models.CharField(max_length=128, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('pdf', models.CharField(max_length=64, null=True)),
                ('paid', models.BooleanField(default=False)),
                ('bcr', models.IntegerField(null=True)),
                ('bcr_code', models.CharField(max_length=128, null=True)),
                ('num_sessions', models.IntegerField(default=1)),
                ('auto', models.BooleanField(default=True)),
                ('report_send', models.BooleanField(default=False)),
                ('bank', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='base.LetsGetBank')),
            ],
            options={
                'db_table': 'base_letsgetcalendar',
            },
        ),
        migrations.CreateModel(
            name='Likes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation', models.IntegerField(verbose_name='Идентификатор оценки пользователя')),
                ('film', models.IntegerField(db_index=True, verbose_name='KID')),
                ('dtime', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата время лайка')),
                ('filmobject', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='base.Films')),
            ],
            options={
                'db_table': 'base_likes',
            },
        ),
        migrations.CreateModel(
            name='Logger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256, verbose_name='text')),
                ('url', models.URLField(blank=True, max_length=256, null=True, verbose_name='url')),
                ('obj_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='объект возбудивший ошибку')),
                ('extra', models.CharField(blank=True, max_length=256, null=True, verbose_name='дополнительное информационное поле')),
                ('event', models.IntegerField(verbose_name='Номер лога')),
                ('code', models.IntegerField(verbose_name='Код события')),
            ],
            options={
                'db_table': 'base_logger',
            },
        ),
        migrations.CreateModel(
            name='Metro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Станция метро')),
                ('kid', models.BigIntegerField(null=True, verbose_name='ID города у источника')),
            ],
        ),
        migrations.CreateModel(
            name='MovieMegogo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('afisha_id', models.IntegerField(db_index=True, null=True)),
                ('megogo_id', models.IntegerField(null=True)),
                ('title', models.CharField(max_length=128, null=True)),
                ('title_en', models.CharField(max_length=128, null=True)),
                ('genres', models.CharField(max_length=256, null=True)),
                ('serial', models.BooleanField()),
                ('page', models.CharField(max_length=256, null=True)),
                ('type_f', models.CharField(max_length=10, null=True)),
                ('kinopoisk_id', models.IntegerField(null=True)),
                ('year', models.IntegerField(null=True)),
                ('country', models.CharField(max_length=128, null=True)),
                ('budget', models.CharField(max_length=20, null=True)),
                ('premiere', models.CharField(max_length=20, null=True)),
                ('dvd', models.CharField(max_length=20, null=True)),
                ('duration', models.CharField(max_length=20, null=True)),
                ('kinopoisk', models.FloatField(null=True)),
                ('imdb', models.FloatField(null=True)),
                ('story', models.TextField(null=True)),
                ('poster_url', models.CharField(max_length=256, null=True)),
                ('poster_thumbnail', models.CharField(max_length=256, null=True)),
                ('rel_ignore', models.BooleanField(default=False, verbose_name='Игнориовать')),
            ],
            options={
                'db_table': 'base_moviemegogo',
            },
        ),
        migrations.CreateModel(
            name='NameFilms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(verbose_name='Статус имени (1 - главное, 0 - альтернативное, 2 - очищенное)')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'db_table': 'base_namefilms',
            },
        ),
        migrations.CreateModel(
            name='NamePerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(verbose_name='Статус')),
                ('name', models.CharField(max_length=256, verbose_name='Имя персоны')),
                ('language', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'db_table': 'base_nameperson',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('text', models.TextField(verbose_name='Текст')),
                ('dtime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('visible', models.BooleanField(default=False, verbose_name='Показывать ли')),
                ('img', models.CharField(max_length=256, null=True, verbose_name='Изображение')),
                ('video', models.CharField(blank=True, max_length=256, null=True, verbose_name='Видео')),
                ('subdomain', models.CharField(editable=False, max_length=128, verbose_name='Субдомен')),
                ('world_pub', models.BooleanField(default=False, verbose_name='Публиковать на всех сайтах')),
                ('reader_type', models.CharField(choices=[('0', 'Черновик'), ('1', 'ПМ'), ('2', 'ПМ нескольким'), ('3', 'Доступно подписчикам'), ('4', 'Доступно городу'), ('5', 'Доступно стране'), ('6', 'Доступно миру'), ('7', 'Обратная связь'), ('8', 'Отзыв'), ('9', 'Вопрос орг.'), ('10', 'Коммент'), ('11', 'Предложение'), ('12', 'Спрос'), ('13', 'Текст на главной'), ('14', 'Рецензия'), ('15', 'Invitation'), ('16', 'Invoice'), ('17', 'Новости kinoafisha.ru'), ('18', 'Новости мирового кино'), ('19', 'Новости российского кино'), ('20', 'Рекламные статьи kinoafisha.ru'), ('21', 'Темы и обзоры'), ('22', 'Вопрос IMIAGroup'), ('23', 'Ответ IMIAGroup'), ('24', 'Обсуждение задания (управление проектами)')], max_length=2, null=True, verbose_name='Тип сообщения')),
                ('autor_status', models.BooleanField(default=True, verbose_name='Видно автору')),
                ('autor_nick', models.IntegerField(default=0, verbose_name='Подпись')),
                ('extra', models.CharField(max_length=256, null=True, verbose_name='Доп.поле')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='Импорт из киноафиши')),
                ('views', models.IntegerField(default=0, verbose_name='Просмотров')),
            ],
            options={
                'db_table': 'base_news',
            },
        ),
        migrations.CreateModel(
            name='NewsTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название метки, тега')),
            ],
            options={
                'db_table': 'base_newstags',
            },
        ),
        migrations.CreateModel(
            name='NotFoundPersonsRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название slug')),
                ('kid', models.IntegerField(verbose_name='KID персоны')),
            ],
            options={
                'db_table': 'base_notfoundpersonsrelations',
            },
        ),
        migrations.CreateModel(
            name='Nowru',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nowru_id', models.IntegerField(verbose_name='ID now.ru')),
                ('idec', models.IntegerField(verbose_name='idec')),
                ('kinopoisk_id', models.IntegerField(blank=True, null=True, verbose_name='ID кинопоиск')),
                ('kid', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='KID')),
                ('regions', models.CharField(max_length=256, verbose_name='Регионы')),
                ('name_ru', models.CharField(max_length=128, verbose_name='Русское название фильма')),
                ('name_en', models.CharField(blank=True, max_length=128, null=True, verbose_name='Нерусское название фильма')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Год')),
                ('player_code', models.CharField(max_length=256, verbose_name='Код плеера')),
                ('url_api', models.URLField(max_length=256, verbose_name='url api')),
                ('url_web', models.URLField(max_length=256, verbose_name='url web')),
                ('url_poster', models.URLField(blank=True, max_length=256, null=True, verbose_name='url постера')),
                ('url_image', models.URLField(blank=True, max_length=256, null=True, verbose_name='url изображения')),
                ('url_player', models.URLField(blank=True, max_length=256, null=True, verbose_name='url показа онлайн')),
                ('rel_ignore', models.BooleanField(default=False, verbose_name='Игнориовать')),
            ],
            options={
                'db_table': 'base_nowru',
            },
        ),
        migrations.CreateModel(
            name='Okinoua',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('imdb', models.IntegerField(blank=True, null=True, verbose_name='ID IMDB фильма')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('url', models.URLField(max_length=256, verbose_name='url')),
                ('name_ru', models.CharField(max_length=128, verbose_name='Русское название фильма')),
                ('name_ua', models.CharField(blank=True, max_length=128, null=True, verbose_name='Украинское название фильма')),
                ('release', models.DateField(verbose_name='Дата релиза')),
                ('distributor', models.CharField(max_length=256, verbose_name='Название дистрибьютора')),
            ],
            options={
                'db_table': 'base_okinoua',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('uni_slug', models.CharField(db_index=True, max_length=256, verbose_name='Название латиницей, очищенное')),
                ('slug', models.CharField(max_length=256, verbose_name='очищенное')),
                ('ownership', models.CharField(choices=[('', '-------'), ('1', 'ООО'), ('2', 'ЗАО'), ('3', 'ОАО'), ('4', 'ФЛП'), ('5', 'ЧП'), ('6', 'ИП')], max_length=1, null=True, verbose_name='Форма собс.')),
                ('room_num', models.IntegerField(null=True, verbose_name='Номер')),
                ('room_type', models.CharField(choices=[('1', 'Офис'), ('2', 'Кабинет'), ('3', 'Квартира')], max_length=1, null=True, verbose_name='Помещение')),
                ('site', models.URLField(blank=True, null=True, verbose_name='Сайт')),
                ('email', models.CharField(blank=True, max_length=256, null=True, verbose_name='E-mail')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Заметка')),
                ('note_accept', models.BooleanField(default=True, verbose_name='Проверена модератором')),
                ('source_id', models.CharField(editable=False, max_length=256, null=True, verbose_name='ID источника')),
                ('trailer', models.CharField(blank=True, max_length=256, null=True, verbose_name='Трейлер')),
                ('rate', models.IntegerField(null=True, verbose_name='Репутация')),
                ('visible', models.BooleanField(default=True, verbose_name='Показывать ли')),
                ('owner', models.CharField(max_length=128, null=True, verbose_name='Владелец, будет ссылкой на профиль я-всети')),
                ('alter_name', models.CharField(max_length=256, null=True, verbose_name='Временное поле для хранения спарсенных данных из name')),
                ('branding', models.CharField(max_length=256, null=True, verbose_name='Фон')),
                ('extra', models.CharField(blank=True, max_length=256, null=True, verbose_name='Доп.данные')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='ID орг на киноафише')),
                ('buildings', models.ManyToManyField(null=True, to='base.Building', verbose_name='Здание')),
                ('circuit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.CinemaCircuit')),
            ],
            options={
                'db_table': 'base_organization',
            },
        ),
        migrations.CreateModel(
            name='Organization_Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
            ],
            options={
                'db_table': 'base_organization_tags',
            },
        ),
        migrations.CreateModel(
            name='OrganizationImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.CharField(max_length=256, verbose_name='Изображение')),
                ('status', models.IntegerField(verbose_name='Статус 1 - главное, 2 - альт.')),
            ],
            options={
                'db_table': 'base_organizationimages',
            },
        ),
        migrations.CreateModel(
            name='OrganizationPhones',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=64, verbose_name='Номер телефона')),
                ('note', models.CharField(max_length=128, null=True, verbose_name='Примечание')),
            ],
            options={
                'db_table': 'base_organizationphones',
            },
        ),
        migrations.CreateModel(
            name='OrganizationRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('link', models.CharField(max_length=256, verbose_name='Ссылка')),
            ],
            options={
                'db_table': 'base_organizationrelations',
            },
        ),
        migrations.CreateModel(
            name='OrganizationTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название метки, тега')),
                ('alter_name', models.CharField(max_length=128, null=True, verbose_name='Альтернативное название метки, тега')),
                ('group_flag', models.CharField(choices=[('1', 'Название'), ('2', 'Ориентир'), ('3', 'Предложение'), ('4', 'Спрос')], max_length=1, null=True, verbose_name='Групповая принадлежность')),
            ],
            options={
                'db_table': 'base_organizationtags',
            },
        ),
        migrations.CreateModel(
            name='OrgMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('private', models.BooleanField(default=False, verbose_name='Только для владельца')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Organization', verbose_name='Организация')),
            ],
            options={
                'db_table': 'base_orgmenu',
            },
        ),
        migrations.CreateModel(
            name='OrgSubMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('page_type', models.CharField(choices=[('1', 'Текст / Блог'), ('2', 'Фотогалерея')], default='0', max_length=1, null=True, verbose_name='Тип страницы')),
                ('url', models.CharField(max_length=64, null=True, verbose_name='URL')),
            ],
            options={
                'db_table': 'base_orgsubmenu',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iid', models.BigIntegerField(blank=True, null=True, verbose_name='Идентификатор персоны на imdb')),
                ('kid', models.BigIntegerField(blank=True, db_index=True, null=True, verbose_name='Идентификатор персоны на киноафише')),
                ('male', models.IntegerField(blank=True, null=True, verbose_name='Пол персоны')),
                ('born', models.DateField(blank=True, null=True, verbose_name='Дата рождения персоны')),
                ('artist', models.BooleanField(default=False)),
                ('is_group', models.BooleanField(default=False)),
                ('text', models.TextField(blank=True, null=True)),
                ('video', models.CharField(blank=True, max_length=256, null=True, verbose_name='Видео')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
                ('musician', models.ManyToManyField(blank=True, null=True, related_name='_person_musician_+', to='base.Person')),
                ('name', models.ManyToManyField(to='base.NamePerson', verbose_name='Имя персоны')),
                ('poster', models.ManyToManyField(null=True, to='base.Images', verbose_name='Постеры, слайды')),
            ],
            options={
                'db_table': 'base_person',
            },
        ),
        migrations.CreateModel(
            name='PersonInterface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option1', models.BooleanField(default=False, verbose_name='Настройка1 - slideblock_schedules')),
                ('option2', models.BooleanField(default=False, verbose_name='Настройка2')),
                ('option3', models.BooleanField(default=False, verbose_name='Настройка3')),
                ('option4', models.BooleanField(default=False, verbose_name='Настройка4')),
                ('wf_topic', models.IntegerField(null=True)),
                ('wf_last', models.IntegerField(null=True)),
                ('wf_style', models.CharField(blank=True, max_length=7, null=True)),
                ('wf_msg_open', models.BooleanField(default=False)),
                ('first_change', models.BooleanField(default=False, verbose_name='Первое изменение настроек')),
                ('changed', models.BooleanField(default=False, verbose_name='Изменения в настройках')),
                ('temp_subscription', models.IntegerField(null=True, verbose_name='KID')),
                ('temp_subscription_topics', models.IntegerField(null=True, verbose_name='KID')),
                ('money', models.FloatField(default=0, verbose_name='Счет')),
                ('likes', models.ManyToManyField(to='base.Likes')),
            ],
            options={
                'db_table': 'base_personinterface',
            },
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=64, verbose_name='Номер телефона')),
                ('phone_type', models.CharField(blank=True, choices=[('K', 'Касса'), ('O', 'Автоответчик'), ('B', 'Бухгалтерия'), ('D', 'Директор'), ('S', 'Справочная'), ('A', 'Администратор'), ('F', 'Факс'), ('N', 'Неопределен')], max_length=1, verbose_name='Тип телефона (Касса, Автоответчик)')),
            ],
            options={
                'db_table': 'base_phone',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Заголовок')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст')),
                ('dtime', models.DateTimeField(auto_now_add=True)),
                ('visible', models.BooleanField(default=False, verbose_name='Visible')),
            ],
            options={
                'db_table': 'base_post',
            },
        ),
        migrations.CreateModel(
            name='ProductionsCo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Компания призводитель')),
                ('imdb_id', models.IntegerField(null=True, verbose_name='IMDb идентификатор')),
            ],
            options={
                'db_table': 'base_productionsco',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_counter', models.IntegerField(blank=True, null=True, verbose_name='Количество посещений в месяц')),
                ('auth_status', models.BooleanField(default=False, verbose_name='Авторизован по email/openid')),
                ('folder', models.CharField(max_length=128, verbose_name='Название папки для профиля')),
                ('show_profile', models.CharField(choices=[('1', 'Всем'), ('2', 'Только мне')], default='1', max_length=1)),
                ('path', models.CharField(blank=True, max_length=256, null=True, verbose_name='урл на который юзер пришел и был зарегестрирован')),
                ('phone', models.CharField(blank=True, max_length=64, null=True, verbose_name='Телефон')),
                ('phone_visible', models.BooleanField(default=False, verbose_name='Виден ли телефон')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='KID')),
                ('bg', models.CharField(blank=True, max_length=64, null=True, verbose_name='Фон')),
                ('bg_url', models.CharField(blank=True, max_length=256, null=True, verbose_name='URL Фон')),
                ('accounts', models.ManyToManyField(to='base.Accounts', verbose_name='Связь с аккаунтами')),
                ('interface', models.ManyToManyField(to='base.Interface', verbose_name='Связь с интерфейсами')),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Person', verbose_name='Персона')),
                ('personinterface', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.PersonInterface', verbose_name='Личные настройки')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
                ('site_admin', models.ManyToManyField(null=True, related_name='site_admin', to='sites.Site', verbose_name='Сайты администрирования')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'base_profile',
            },
        ),
        migrations.CreateModel(
            name='ProjectsGallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Примечание')),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Images')),
            ],
            options={
                'db_table': 'base_projectsgallery',
            },
        ),
        migrations.CreateModel(
            name='ProjectStages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название этапа')),
                ('start_date', models.DateField(verbose_name='Дата старта')),
                ('end_date', models.DateField(verbose_name='Дата релиза')),
                ('budget', models.IntegerField(verbose_name='Бюджет')),
            ],
            options={
                'db_table': 'base_projectstages',
            },
        ),
        migrations.CreateModel(
            name='RaspishiRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rid', models.IntegerField(verbose_name='ID источника')),
                ('kid', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='KID фильма')),
                ('name_ru', models.CharField(max_length=128, verbose_name='Русское название фильма')),
                ('name_en', models.CharField(blank=True, max_length=128, null=True, verbose_name='Англ. название фильма')),
            ],
            options={
                'db_table': 'base_raspishirelations',
            },
        ),
        migrations.CreateModel(
            name='Releases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=128, verbose_name='Русское название фильма')),
                ('name_en', models.CharField(max_length=128, verbose_name='Нерусское название фильма')),
                ('details', models.CharField(blank=True, max_length=128, null=True, verbose_name='Детали')),
                ('film_id', models.IntegerField(db_index=True, verbose_name='ID фильма на источнике')),
                ('url', models.URLField(max_length=256, verbose_name='url')),
                ('release_date', models.DateField(db_index=True, verbose_name='Дата релиза')),
                ('distributor1', models.CharField(blank=True, max_length=128, null=True, verbose_name='Дистрибьютор1')),
                ('distributor1_id', models.CharField(blank=True, max_length=24, null=True, verbose_name='ID дистрибьютора1')),
                ('distributor2', models.CharField(blank=True, max_length=128, null=True, verbose_name='Дистрибьютор2')),
                ('distributor2_id', models.CharField(blank=True, max_length=24, null=True, verbose_name='ID дистрибьютора2')),
                ('copies', models.IntegerField(blank=True, null=True, verbose_name='Число копий')),
                ('runtime', models.IntegerField(blank=True, null=True, verbose_name='Хронометраж')),
            ],
            options={
                'db_table': 'base_releases',
            },
        ),
        migrations.CreateModel(
            name='ReleasesRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film_kid', models.IntegerField(db_index=True, verbose_name='KID фильма')),
                ('distributor_kid', models.IntegerField(verbose_name='KID дистрибьютора')),
                ('rel_dtime', models.DateTimeField(null=True, verbose_name='Когда связал')),
                ('rel_double', models.BooleanField(default=False, verbose_name='Дубль')),
                ('rel_ignore', models.BooleanField(default=False, verbose_name='Игнориовать')),
                ('rel_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Кто связал')),
                ('release', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Releases', verbose_name='Релиз')),
            ],
            options={
                'db_table': 'base_releasesrelations',
            },
        ),
        migrations.CreateModel(
            name='Runtime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('runtime', models.IntegerField(verbose_name='Хронометраж')),
                ('runtime_note', models.TextField(blank=True, null=True, verbose_name='Версия')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True)),
                ('site_type', models.CharField(blank=True, choices=[('O', 'Официальный'), ('A', 'Городская афиша'), ('B', 'ВКонтакте')], max_length=1, verbose_name='Тип сайта')),
            ],
            options={
                'db_table': 'base_site',
            },
        ),
        migrations.CreateModel(
            name='SiteBanners',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.CharField(max_length=256, verbose_name='Файл')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('url', models.CharField(blank=True, max_length=256, null=True, verbose_name='Название')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст')),
                ('budget', models.IntegerField(default=0, verbose_name='Бюджет')),
                ('balance', models.FloatField(default=0, verbose_name='Остаток')),
                ('dtime', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата, время создания')),
                ('last_show', models.DateField(auto_now_add=True, verbose_name='Дата последнего показа')),
                ('style', models.CharField(blank=True, max_length=32, null=True, verbose_name='Стиль')),
                ('btype', models.CharField(choices=[('0', 'Отключение фона'), ('1', 'Текстовый блок под левым меню (весь сайт)'), ('2', 'Фон (весь сайт)'), ('3', 'Фон (страница юзера)'), ('4', 'SWF блок под левым меню (страница юзера)'), ('5', 'SWF блок под левым меню (весь сайт)'), ('6', 'Мобильный блок перед подвалом'), ('7', 'Встроенный код под левым меню (весь сайт)')], max_length=1, verbose_name='Тип')),
                ('views', models.IntegerField(default=0, verbose_name='Кол-во просмотров')),
                ('bg_disable_dtime_to', models.DateTimeField(null=True, verbose_name='Дата время до которого действует отмена фона')),
                ('spent', models.FloatField(default=0, verbose_name='Потрачено средств на блок')),
                ('deleted', models.BooleanField(db_index=True, default=False, verbose_name='Удален')),
                ('cities', models.ManyToManyField(to='base.City')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='city_sitebanners', to='base.City', verbose_name='Город')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль - площадка')),
                ('sites', models.ManyToManyField(to='sites.Site', verbose_name='Сайты - площадки')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_sitebanners', to='base.Profile', verbose_name='Автор')),
            ],
            options={
                'db_table': 'base_sitebanners',
            },
        ),
        migrations.CreateModel(
            name='SoundParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sound', models.CharField(choices=[('1', '1.0'), ('2', '2.0'), ('5', '5.1'), ('7', '7.1')], max_length=1, verbose_name='Число каналов')),
                ('soundsystem', models.CharField(choices=[('D', 'Dolby Digital'), ('T', 'DTS'), ('S', 'SDDS')], max_length=1, verbose_name='Система звука')),
            ],
        ),
        migrations.CreateModel(
            name='SourceCinemas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=256, verbose_name='ID источника')),
                ('name', models.CharField(max_length=256, verbose_name='Название кинотеатра у источника')),
                ('name_alter', models.CharField(blank=True, max_length=256, null=True, verbose_name='Альтер. кинотеатра у источника')),
                ('address', models.CharField(blank=True, max_length=256, null=True, verbose_name='Адрес кинотеатра у источника')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Широта')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Долгота')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Cinema', verbose_name='Кинотеатр')),
            ],
            options={
                'db_table': 'base_sourcecinemas',
            },
        ),
        migrations.CreateModel(
            name='SourceFilms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(db_index=True, max_length=256, verbose_name='ID источника')),
                ('name', models.CharField(max_length=256, verbose_name='Название фильма у источника')),
                ('name_alter', models.CharField(blank=True, max_length=256, null=True, verbose_name='Альтер. фильма у источника')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='KID фильма')),
                ('year', models.IntegerField(blank=True, null=True, verbose_name='Год выпуска фильма у источника')),
                ('imdb', models.CharField(blank=True, max_length=64, null=True, verbose_name='IMDB фильма у источника')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Описание фильма')),
                ('extra', models.CharField(blank=True, max_length=256, null=True, verbose_name='Дополнительные данные')),
                ('rel_dtime', models.DateTimeField(null=True, verbose_name='Когда связал')),
                ('rel_double', models.BooleanField(default=False, verbose_name='Дубль')),
                ('rel_ignore', models.BooleanField(db_index=True, default=False, verbose_name='Игнорировать')),
                ('rel_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Кто связал')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourcefilms',
            },
        ),
        migrations.CreateModel(
            name='StatisticsDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.IntegerField(verbose_name='ID источника')),
                ('cinemas', models.IntegerField(verbose_name='Всего кинотеатров у источника')),
                ('cinemas_sale', models.IntegerField(verbose_name='Всего кинотеатров у источника с продажей')),
                ('films', models.IntegerField(verbose_name='Всего фильмов у источника')),
                ('sessions', models.IntegerField(verbose_name='Всего сеансов у источника')),
                ('sessions_sale', models.IntegerField(verbose_name='Всего сеансов у источника с продажей')),
            ],
            options={
                'db_table': 'base_statisticsdetails',
            },
        ),
        migrations.CreateModel(
            name='StatusAct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Статус участия персоны')),
            ],
        ),
        migrations.CreateModel(
            name='StreetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Тип улицы')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriberObjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'Блоги'), ('2', 'Ответы на коммент в блоге'), ('3', 'Все комменты в блоге'), ('4', 'Уведомление по рекламной кампании'), ('5', 'Отчет по окончанию рекламной кампании')], max_length=2, verbose_name='Тип объекта')),
                ('obj', models.IntegerField(verbose_name='ID объекта')),
                ('end_obj', models.IntegerField(verbose_name='ID конечного объекта')),
                ('in_work', models.BooleanField(default=True, verbose_name='В работе')),
            ],
            options={
                'db_table': 'base_subscriberobjects',
            },
        ),
        migrations.CreateModel(
            name='Torrents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('film', models.IntegerField(db_index=True, verbose_name='KID фильма')),
                ('go_link_id', models.CharField(max_length=32, null=True, verbose_name='ID ссылки')),
                ('link', models.CharField(max_length=256, null=True, verbose_name='Ссылка на трекер')),
                ('tracker', models.CharField(max_length=64, null=True, verbose_name='Трекер')),
                ('quality', models.CharField(max_length=32, null=True, verbose_name='Качество')),
                ('quality_avg', models.CharField(choices=[('0', 'Плохое'), ('1', 'Хорошее'), ('2', 'Отличное')], max_length=1, null=True, verbose_name='Качество')),
                ('file_size', models.CharField(max_length=32, null=True, verbose_name='Размер файла')),
                ('path', models.CharField(max_length=256, null=True, verbose_name='Торрент файл')),
                ('source_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_torrents',
            },
        ),
        migrations.CreateModel(
            name='UkrainianReleases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('release', models.DateField(verbose_name='Дата релиза')),
            ],
            options={
                'db_table': 'base_ukrainianreleases',
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Версия')),
            ],
        ),
        migrations.CreateModel(
            name='WomenForumIgnored',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(verbose_name='Тип игнора')),
                ('msg', models.IntegerField(db_index=True, null=True, verbose_name='ID сообщения на форуме')),
                ('branch', models.IntegerField(null=True, verbose_name='ID топика на форуме')),
                ('author', models.IntegerField(null=True, verbose_name='ID автора на форуме')),
                ('user', models.IntegerField(verbose_name='ID юзера на форуме')),
            ],
            options={
                'db_table': 'base_womenforumignored',
            },
        ),
        migrations.CreateModel(
            name='WomenForumIgnoreLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.IntegerField(verbose_name='ID юзера на форуме')),
                ('dtime', models.DateTimeField(verbose_name='Дата и время перехода на уровень')),
                ('type', models.IntegerField(db_index=True, verbose_name='Тип игнора')),
            ],
            options={
                'db_table': 'base_womenforumignorelevel',
            },
        ),
        migrations.CreateModel(
            name='WomenForumLikes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.IntegerField(db_index=True, verbose_name='ID сообщения на форуме')),
                ('like_type', models.BooleanField()),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile')),
            ],
            options={
                'db_table': 'base_womenforumlikes',
            },
        ),
        migrations.CreateModel(
            name='WithdrawMoney',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summa', models.FloatField(verbose_name='Сумма')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Когда списавает')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profile_withdrawmoney', to='base.Profile', verbose_name='У кого списывает')),
                ('who', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='who_withdrawmoney', to='base.Profile', verbose_name='Кто списывает')),
            ],
            options={
                'db_table': 'base_withdrawmoney',
            },
        ),
        migrations.CreateModel(
            name='UserDeposit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summa', models.FloatField(verbose_name='Сумма')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Когда начислено')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Для кого')),
            ],
            options={
                'db_table': 'base_userdeposit',
            },
        ),
        migrations.CreateModel(
            name='UkrainePosters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=128, verbose_name='ID источника')),
                ('poster', models.CharField(blank=True, max_length=100, verbose_name='Путь к постеру')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_ukraineposters',
            },
        ),
        migrations.CreateModel(
            name='TorrentsUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата время получения')),
                ('got', models.BooleanField(default=False, verbose_name='Был ли файл скачан')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Profile', verbose_name='Профиль')),
                ('torrent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Torrents', verbose_name='Торрент')),
            ],
            options={
                'db_table': 'base_torrentsusers',
            },
        ),
        migrations.CreateModel(
            name='Top250',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=256, verbose_name='Уникальный ключ')),
                ('date_upd', models.DateField(verbose_name='Дата обновления')),
                ('position', models.IntegerField(verbose_name='Позиция в рейтинге')),
                ('change', models.IntegerField(verbose_name='Изменение позиции')),
                ('change_val', models.IntegerField(null=True, verbose_name='На сколько позиций')),
                ('rating', models.FloatField(verbose_name='Рейтинг')),
                ('votes', models.IntegerField(verbose_name='Кол-во голосов')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceFilms', verbose_name='Фильм')),
            ],
            options={
                'db_table': 'base_top250',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionTopics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('dtime', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата время подписки')),
                ('notified', models.BooleanField(default=False, verbose_name='Уведомлен ли')),
                ('quality', models.CharField(choices=[('0', 'Плохое'), ('1', 'Хорошее'), ('2', 'Отличное')], max_length=1, null=True, verbose_name='Качество')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
            ],
            options={
                'db_table': 'base_subscriptiontopics',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата время подписки')),
                ('notified', models.BooleanField(default=False, verbose_name='Уведомлен ли')),
                ('kid', models.IntegerField(db_index=True, null=True, verbose_name='KID фильма')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
                ('release', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ReleasesRelations', verbose_name='Релиз')),
            ],
            options={
                'db_table': 'base_subscriptionrelease',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionFeeds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата время подписки')),
                ('type', models.CharField(choices=[('1', 'Сеансы'), ('2', 'Релизы'), ('3', 'Статьи'), ('4', 'Новости Ялты'), ('5', 'Новости Орска'), ('6', 'Lets Get Rhythm news'), ('7', 'Посты Memoirs')], max_length=1, verbose_name='На что подписан')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
            ],
            options={
                'db_table': 'base_subscriptionfeeds',
            },
        ),
        migrations.CreateModel(
            name='SubscriberUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'Блоги'), ('2', 'Ответы на коммент в блоге'), ('3', 'Все комменты в блоге'), ('4', 'Уведомление по рекламной кампании'), ('5', 'Отчет по окончанию рекламной кампании')], max_length=2, verbose_name='Тип объекта')),
                ('obj', models.IntegerField(verbose_name='ID объекта')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата, время подписки')),
                ('unsubscribe', models.CharField(max_length=64, verbose_name='Код для отписки')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль подписчика')),
            ],
            options={
                'db_table': 'base_subscriberuser',
            },
        ),
        migrations.CreateModel(
            name='SubscriberLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notified', models.BooleanField(default=True, verbose_name='Оповещен ли')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата, время оповещения')),
                ('error', models.CharField(blank=True, max_length=128, null=True, verbose_name='Описание ошибки')),
                ('obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SubscriberObjects', verbose_name='Объект')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SubscriberUser', verbose_name='Подписчик')),
            ],
            options={
                'db_table': 'base_subscriberlog',
            },
        ),
        migrations.CreateModel(
            name='Street',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('slug', models.CharField(max_length=64, verbose_name='Slug')),
                ('type', models.CharField(choices=[('1', 'улица'), ('2', 'переулок'), ('3', 'площадь'), ('4', 'набережная'), ('5', 'шоссе'), ('6', 'проспект'), ('7', 'проезд'), ('8', 'аллея'), ('9', 'бульвар'), ('10', 'парк'), ('11', 'тупик'), ('12', 'км'), ('13', 'микрорайон'), ('14', 'квартал'), ('70', 'St'), ('71', 'Rd'), ('72', 'Ave'), ('73', 'Hwy'), ('74', 'Dr'), ('75', 'Crt'), ('76', 'Pde')], max_length=2, verbose_name='Тип улицы')),
                ('area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Area')),
            ],
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('sessions', models.IntegerField(verbose_name='Всего сеаснов')),
                ('sessions_sale', models.IntegerField(verbose_name='Сеансов с продажей')),
                ('cinemas', models.IntegerField(verbose_name='Всего кинотеатров')),
                ('cinemas_sale', models.IntegerField(verbose_name='Кинотеатров с продажей')),
                ('films', models.IntegerField(verbose_name='Всего фильмов')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата время статистики')),
                ('details', models.ManyToManyField(blank=True, null=True, to='base.StatisticsDetails', verbose_name='Статистика по источникам')),
            ],
            options={
                'db_table': 'base_statistics',
            },
        ),
        migrations.CreateModel(
            name='SourceUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(db_index=True, max_length=256, verbose_name='ID источника')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourceusers',
            },
        ),
        migrations.CreateModel(
            name='SourceSchedules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(db_index=True, max_length=256, verbose_name='ID источника')),
                ('dtime', models.DateTimeField(db_index=True, verbose_name='Дата и время сеанса')),
                ('hall', models.IntegerField(blank=True, null=True, verbose_name='KID зала')),
                ('sale', models.BooleanField(default=False, verbose_name='Возможность он-лайн покупки')),
                ('price', models.CharField(blank=True, max_length=64, null=True, verbose_name='Цена билета')),
                ('extra', models.CharField(max_length=256, null=True, verbose_name='Любой дополнительный параметр')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceCinemas', verbose_name='Кинотеатр источника')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceFilms', verbose_name='Фильм источника')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourceschedules',
            },
        ),
        migrations.CreateModel(
            name='SourceReleases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release', models.DateField(db_index=True, verbose_name='Дата релиза')),
                ('distributor', models.CharField(max_length=256, null=True, verbose_name='Название дистрибьютора')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceFilms', verbose_name='Фильм источника')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourcereleases',
            },
        ),
        migrations.CreateModel(
            name='SourceHalls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=256, verbose_name='ID источника')),
                ('name', models.CharField(max_length=256, verbose_name='Название зала у источника')),
                ('name_alter', models.CharField(blank=True, max_length=256, null=True, verbose_name='Альтер. зала у источника')),
                ('kid', models.IntegerField(verbose_name='KID зала')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceCinemas', verbose_name='Зал источника')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourcehalls',
            },
        ),
        migrations.CreateModel(
            name='SourceCities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=256, verbose_name='ID источника')),
                ('name', models.CharField(max_length=256, verbose_name='Название города у источника')),
                ('name_alter', models.CharField(blank=True, max_length=256, null=True, verbose_name='Альт. название города у источника')),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sourcecities',
            },
        ),
        migrations.AddField(
            model_name='sourcecinemas',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceCities', verbose_name='Город источника'),
        ),
        migrations.AddField(
            model_name='sourcecinemas',
            name='source_obj',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник'),
        ),
        migrations.CreateModel(
            name='SiteBannersViews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateField(auto_now_add=True, verbose_name='Дата, время просмотра')),
                ('banner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.SiteBanners', verbose_name='Баннер')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Profile', verbose_name='Профиль юзера')),
            ],
            options={
                'db_table': 'base_sitebannersviews',
            },
        ),
        migrations.CreateModel(
            name='SiteBannersClicks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата, время клика')),
                ('banner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.SiteBanners', verbose_name='Баннер')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.Profile', verbose_name='Профиль юзера')),
            ],
            options={
                'db_table': 'base_sitebannersclicks',
            },
        ),
        migrations.CreateModel(
            name='SessionsAfishaRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(db_index=True, verbose_name='KID сеанса')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceSchedules', verbose_name='Сеанс источника')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_sessionsafisharelations',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='Порядок в демонстрации')),
                ('average_price', models.IntegerField(blank=True, null=True, verbose_name='Средняя цена билета')),
                ('number_people', models.IntegerField(blank=True, null=True, verbose_name='Число людей на сеансе')),
                ('demonstration', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Demonstration')),
                ('film', models.ManyToManyField(to='base.NameFilms', verbose_name='Фильм(ы)')),
            ],
            options={
                'db_table': 'base_session',
            },
        ),
        migrations.CreateModel(
            name='ScheduleRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название фильма')),
                ('kid', models.IntegerField(verbose_name='Идентификатор киноафиши')),
                ('dtime', models.DateTimeField(verbose_name='Дата, время сеанса')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Hall')),
            ],
            options={
                'db_table': 'base_schedulerelations',
            },
        ),
        migrations.CreateModel(
            name='RelationFP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Action')),
                ('films', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='persons', to='base.Films')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
                ('status_act', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.StatusAct')),
            ],
            options={
                'db_table': 'base_relationfp',
            },
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ManyToManyField(to='base.News')),
            ],
            options={
                'db_table': 'base_questionanswer',
            },
        ),
        migrations.CreateModel(
            name='QAnswers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.ManyToManyField(to='base.News')),
            ],
            options={
                'db_table': 'base_qanswers',
            },
        ),
        migrations.CreateModel(
            name='ProjectsGalleryLang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Примечание')),
                ('gallery', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ProjectsGallery')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'db_table': 'base_projectsgallerylang',
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название проекта')),
                ('url', models.CharField(max_length=128, null=True, verbose_name='URL')),
                ('start_date', models.DateField(null=True, verbose_name='Дата старта')),
                ('release_date', models.DateField(null=True, verbose_name='Дата релиза')),
                ('sms', models.BooleanField(default=False, verbose_name='Notify by SMS')),
                ('email', models.BooleanField(default=True, verbose_name='Notify by E-mail')),
                ('budget', models.IntegerField(null=True, verbose_name='Бюджет')),
                ('currency', models.CharField(choices=[('1', 'USD'), ('2', 'EUR'), ('3', 'AUD'), ('4', 'RUB'), ('5', 'UAH'), ('6', 'NZD')], max_length=1, null=True, verbose_name='Валюта')),
                ('is_public', models.BooleanField(default=True, verbose_name='Показывать всем')),
                ('director', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile')),
                ('directors', models.ManyToManyField(related_name='project_directors', to='base.Profile')),
                ('members', models.ManyToManyField(related_name='project_members', to='base.Profile')),
                ('stages', models.ManyToManyField(to='base.ProjectStages', verbose_name='Этапы')),
            ],
            options={
                'db_table': 'base_projects',
            },
        ),
        migrations.CreateModel(
            name='PaidActions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object', models.CharField(max_length=256, null=True, verbose_name='Объект над которым произошло действие')),
                ('extra', models.CharField(max_length=256, null=True, verbose_name='Дополнительные сведения')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('dtime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('allow', models.BooleanField(default=False, verbose_name='Учитывать')),
                ('ignore', models.BooleanField(default=False, verbose_name='Не оплачивать')),
                ('number', models.IntegerField(default=1, verbose_name='Кол-во действий')),
                ('act', models.CharField(choices=[('1', 'добавл.'), ('2', 'измен.'), ('3', 'удал.'), ('4', 'Кнопка Приглашения')], max_length=1, null=True, verbose_name='Действие')),
                ('future', models.BooleanField(default=False, verbose_name='Задание на будущее')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='Принято в работу (админом)')),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ActionsPriceList', verbose_name='Оплачиваемое действие')),
                ('director', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='director_paidactions', to='base.Profile', verbose_name='Профиль директора')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
                ('stage', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ProjectStages', verbose_name='Этап работы')),
            ],
            options={
                'db_table': 'base_paidactions',
            },
        ),
        migrations.CreateModel(
            name='OrgSubMenuLang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
                ('orgsubmenu', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.OrgSubMenu')),
            ],
            options={
                'db_table': 'base_orgsubmenulang',
            },
        ),
        migrations.AddField(
            model_name='orgsubmenu',
            name='booker_profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Связь с букером'),
        ),
        migrations.AddField(
            model_name='orgsubmenu',
            name='gallery',
            field=models.ManyToManyField(to='base.ProjectsGallery'),
        ),
        migrations.AddField(
            model_name='orgsubmenu',
            name='news',
            field=models.ManyToManyField(to='base.News'),
        ),
        migrations.CreateModel(
            name='OrgMenuLang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
                ('orgmenu', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.OrgMenu')),
            ],
            options={
                'db_table': 'base_orgmenulang',
            },
        ),
        migrations.AddField(
            model_name='orgmenu',
            name='profile',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль'),
        ),
        migrations.AddField(
            model_name='orgmenu',
            name='submenu',
            field=models.ManyToManyField(to='base.OrgSubMenu', verbose_name='Подменю'),
        ),
        migrations.CreateModel(
            name='OrganizationNews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.News')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
                ('tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Organization_Tags')),
            ],
            options={
                'db_table': 'base_organizationnews',
            },
        ),
        migrations.CreateModel(
            name='OrganizationMenu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.OrganizationTags', verbose_name='Метка')),
            ],
            options={
                'db_table': 'base_organizationmenu',
            },
        ),
        migrations.CreateModel(
            name='OrganizationLang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, verbose_name='Название')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Заметка')),
                ('extra', models.CharField(blank=True, max_length=256, null=True, verbose_name='Доп.данные')),
                ('buildings', models.ManyToManyField(null=True, to='base.Building', verbose_name='Здание')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
            ],
            options={
                'db_table': 'base_organizationlang',
            },
        ),
        migrations.AddField(
            model_name='organization_tags',
            name='organizationtags',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.OrganizationTags'),
        ),
        migrations.AddField(
            model_name='organization',
            name='creator',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='organization',
            name='domain',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site'),
        ),
        migrations.AddField(
            model_name='organization',
            name='editors',
            field=models.ManyToManyField(null=True, related_name='editors_organization', to='base.Profile', verbose_name='Редакторы'),
        ),
        migrations.AddField(
            model_name='organization',
            name='images',
            field=models.ManyToManyField(null=True, to='base.OrganizationImages', verbose_name='Изображения'),
        ),
        migrations.AddField(
            model_name='organization',
            name='news',
            field=models.ManyToManyField(through='base.OrganizationNews', to='base.News', verbose_name='Новости - спрос, предложения, объявления'),
        ),
        migrations.AddField(
            model_name='organization',
            name='phones',
            field=models.ManyToManyField(null=True, to='base.OrganizationPhones', verbose_name='Телефоны'),
        ),
        migrations.AddField(
            model_name='organization',
            name='relations',
            field=models.ManyToManyField(null=True, to='base.OrganizationRelations', verbose_name='Связи'),
        ),
        migrations.AddField(
            model_name='organization',
            name='source_obj',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник'),
        ),
        migrations.AddField(
            model_name='organization',
            name='staff',
            field=models.ManyToManyField(null=True, related_name='staff_organization', to='base.Profile', verbose_name='Сотрудники'),
        ),
        migrations.AddField(
            model_name='organization',
            name='tags',
            field=models.ManyToManyField(through='base.Organization_Tags', to='base.OrganizationTags', verbose_name='Метки'),
        ),
        migrations.CreateModel(
            name='NotFoundFilmsRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название slug')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('source_obj', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_notfoundfilmsrelations',
            },
        ),
        migrations.CreateModel(
            name='NotFoundCinemasRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название slug')),
                ('kid', models.IntegerField(verbose_name='KID кинотеатра')),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город')),
            ],
            options={
                'db_table': 'base_notfoundcinemasrelations',
            },
        ),
        migrations.CreateModel(
            name='NewsReaders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('0', 'Непрочитаное'), ('1', 'Удалено'), ('2', 'Прочитанное'), ('3', 'Отвеченное'), ('4', 'Собственное')], max_length=1, verbose_name='Тип действия с сообщением')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.News', verbose_name='Сообщение')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Связь с юзером')),
            ],
            options={
                'db_table': 'base_newsreaders',
            },
        ),
        migrations.CreateModel(
            name='NewsFilms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(db_index=True, verbose_name='KID фильма')),
                ('source_id', models.CharField(max_length=128, null=True, verbose_name='ID источника')),
                ('rate', models.IntegerField(null=True, verbose_name='Оценка')),
                ('rate_1', models.IntegerField(null=True)),
                ('rate_2', models.IntegerField(null=True)),
                ('rate_3', models.IntegerField(null=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.News', verbose_name='Сообщение')),
                ('source_obj', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_newsfilms',
            },
        ),
        migrations.CreateModel(
            name='NewsAlterTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('text', models.TextField(verbose_name='Текст')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.News')),
                ('tags', models.ManyToManyField(null=True, to='base.NewsTags', verbose_name='Метки')),
            ],
            options={
                'db_table': 'base_newsaltertranslation',
            },
        ),
        migrations.AddField(
            model_name='news',
            name='autor',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='news',
            name='branch',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='branch_rel', to='base.News'),
        ),
        migrations.AddField(
            model_name='news',
            name='language',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language'),
        ),
        migrations.AddField(
            model_name='news',
            name='parent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='parent_rel', to='base.News'),
        ),
        migrations.AddField(
            model_name='news',
            name='site',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='sites.Site', verbose_name='Сайт'),
        ),
        migrations.AddField(
            model_name='news',
            name='tags',
            field=models.ManyToManyField(null=True, to='base.NewsTags', verbose_name='Метки'),
        ),
        migrations.AddField(
            model_name='news',
            name='translation_for',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='translate_for_rel', to='base.News'),
        ),
        migrations.CreateModel(
            name='NameHall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(verbose_name='Статус имени (1 - главное, 0 - альтернативное, 2 - очищенное)')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'verbose_name': 'Название',
                'verbose_name_plural': 'Названия',
            },
        ),
        migrations.CreateModel(
            name='NameDistributors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(verbose_name='Статус имени (1 - главное, 0 - альтернативное, 2 - очищенное)')),
                ('name', models.CharField(max_length=256, verbose_name='Название бренда')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'db_table': 'base_namedistributors',
            },
        ),
        migrations.CreateModel(
            name='NameCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(db_index=True, verbose_name='Статус имени (1 - главное, 0 - альт, 2 - очищ, 3 - род.падеж)')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'verbose_name': 'Название',
                'verbose_name_plural': 'Названия',
            },
        ),
        migrations.CreateModel(
            name='NameCinema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(db_index=True, verbose_name='Статус имени (1 - главное, 0 - альтернативное, 2 - очищенное)')),
                ('name', models.CharField(max_length=256, verbose_name='Название')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
            options={
                'verbose_name': 'Название',
                'verbose_name_plural': 'Названия',
            },
        ),
        migrations.CreateModel(
            name='Mediafiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sign', models.CharField(max_length=256, verbose_name='ID файла')),
                ('path', models.CharField(max_length=256, verbose_name='Путь к файлу')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время загрузки')),
                ('tmp', models.BooleanField(default=True, verbose_name='Статус временного файла')),
                ('size', models.CharField(blank=True, max_length=32, null=True, verbose_name='Размер')),
                ('bitrate', models.CharField(blank=True, max_length=32, null=True, verbose_name='Битрейт')),
                ('runtime', models.CharField(blank=True, max_length=16, null=True, verbose_name='Хронометраж')),
                ('original_file_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Оригинальное название файла')),
                ('original_artist', models.CharField(blank=True, max_length=128, null=True, verbose_name='Оригинальное название артиста')),
                ('original_album', models.CharField(blank=True, max_length=128, null=True, verbose_name='Оригинальное название альбома')),
                ('original_title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Оригинальное название трека')),
                ('mtype', models.CharField(choices=[('0', 'Нет'), ('1', 'Минус'), ('2', 'Плюс'), ('3', 'Табулатура')], default='0', max_length=1, verbose_name='Тип')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Кто загрузил')),
                ('tags', models.ManyToManyField(to='base.NewsTags', verbose_name='Теги')),
            ],
            options={
                'db_table': 'base_mediafiles',
            },
        ),
        migrations.CreateModel(
            name='LetsGetClients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdomain', models.CharField(max_length=128, null=True)),
                ('tag', models.CharField(blank=True, max_length=128, null=True)),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'db_table': 'base_letsgetclients',
            },
        ),
        migrations.CreateModel(
            name='LetsGetCalendarNotified',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sms_notified', models.BooleanField(default=False)),
                ('sms_status', models.CharField(blank=True, max_length=128, null=True)),
                ('sms_dtime', models.DateTimeField(null=True)),
                ('sms_id', models.CharField(blank=True, max_length=64, null=True)),
                ('email_notified', models.BooleanField(default=False)),
                ('email_status', models.CharField(blank=True, max_length=128, null=True)),
                ('email_dtime', models.DateTimeField(null=True)),
                ('invite_notified', models.BooleanField(default=False)),
                ('invite_status', models.CharField(blank=True, max_length=128, null=True)),
                ('invite_dtime', models.DateTimeField(null=True)),
                ('invoice_notified', models.BooleanField(default=False)),
                ('invoice_status', models.CharField(blank=True, max_length=128, null=True)),
                ('invoice_dtime', models.DateTimeField(null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.LetsGetCalendar')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Profile')),
            ],
            options={
                'db_table': 'base_letsgetcalendarnotified',
            },
        ),
        migrations.CreateModel(
            name='LetsGetCalendarClientNotified',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invite_notified', models.BooleanField(default=False)),
                ('invite_status', models.CharField(blank=True, max_length=128, null=True)),
                ('invite_dtime', models.DateTimeField(auto_now_add=True, null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.LetsGetClients')),
            ],
            options={
                'db_table': 'base_letsgetcalendarclientnotified',
            },
        ),
        migrations.AddField(
            model_name='letsgetcalendar',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.LetsGetClients'),
        ),
        migrations.AddField(
            model_name='letsgetcalendar',
            name='invoice_template',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.News'),
        ),
        migrations.AddField(
            model_name='letsgetcalendar',
            name='report',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='report_letsgetcalendar', to='base.News'),
        ),
        migrations.AddField(
            model_name='letsgetcalendar',
            name='site',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site'),
        ),
        migrations.CreateModel(
            name='LanguageCountry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Country')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Language')),
            ],
        ),
        migrations.CreateModel(
            name='KIFilmRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.BigIntegerField(verbose_name='ID фильма у источника')),
                ('name', models.ManyToManyField(blank=True, null=True, to='base.NameFilms', verbose_name='Название фильма')),
            ],
            options={
                'db_table': 'base_kifilmrelations',
            },
        ),
        migrations.CreateModel(
            name='HallsSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url_hall_sources', models.URLField(max_length=256, verbose_name='url-hall')),
                ('id_hall', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Hall', verbose_name='Зал')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_hallssources',
            },
        ),
        migrations.AddField(
            model_name='hall',
            name='name',
            field=models.ManyToManyField(blank=True, null=True, to='base.NameHall', verbose_name='Название зала'),
        ),
        migrations.CreateModel(
            name='ForumGeneral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название форума')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
                ('topics', models.ManyToManyField(to='base.News', verbose_name='Топики')),
            ],
            options={
                'db_table': 'base_forumgeneral',
            },
        ),
        migrations.CreateModel(
            name='FilmsVotes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(verbose_name='ID фильма на киноафише')),
                ('rate_1', models.IntegerField()),
                ('rate_2', models.IntegerField()),
                ('rate_3', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Юзер')),
            ],
            options={
                'db_table': 'base_filmsvotes',
            },
        ),
        migrations.CreateModel(
            name='FilmsSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_films_sources', models.BigIntegerField(verbose_name='Фильм у источника')),
                ('id_films', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sources', to='base.Films', verbose_name='КиноИнфо')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_filmssources',
            },
        ),
        migrations.CreateModel(
            name='FilmsReleaseDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('release', models.DateField(verbose_name='Дата релиза')),
                ('note', models.CharField(blank=True, max_length=256, null=True)),
                ('format', models.CharField(choices=[('0', 'Обычный'), ('1', 'Фестиваль'), ('2', 'Limited'), ('3', 'DVD'), ('4', 'Blu-Ray'), ('5', 'Internet'), ('6', '3D'), ('7', 'Другой'), ('8', 'TV')], max_length=1, verbose_name='Формат релиза')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Country')),
            ],
            options={
                'db_table': 'base_filmsreleasedate',
            },
        ),
        migrations.AddField(
            model_name='films',
            name='creators',
            field=models.ManyToManyField(null=True, related_name='key_creators_films', through='base.RelationFP', to='base.Person', verbose_name='Ключевые создатели'),
        ),
        migrations.AddField(
            model_name='films',
            name='distributor',
            field=models.ManyToManyField(to='base.Distributors', verbose_name='Дистрибьютор'),
        ),
        migrations.AddField(
            model_name='films',
            name='genre',
            field=models.ManyToManyField(to='base.Genre', verbose_name='Жанр'),
        ),
        migrations.AddField(
            model_name='films',
            name='images',
            field=models.ManyToManyField(to='base.Images', verbose_name='Постеры, слайды'),
        ),
        migrations.AddField(
            model_name='films',
            name='name',
            field=models.ManyToManyField(to='base.NameFilms', verbose_name='Название продукта'),
        ),
        migrations.AddField(
            model_name='films',
            name='production',
            field=models.ManyToManyField(to='base.ProductionsCo', verbose_name='Компания призводитель'),
        ),
        migrations.AddField(
            model_name='films',
            name='release',
            field=models.ManyToManyField(to='base.FilmsReleaseDate'),
        ),
        migrations.AddField(
            model_name='distributors',
            name='name',
            field=models.ManyToManyField(related_name='distributors', to='base.NameDistributors', verbose_name='Название'),
        ),
        migrations.CreateModel(
            name='DialogMessages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('readers', models.ManyToManyField(to='base.NewsReaders', verbose_name='Пользователь адресат')),
            ],
            options={
                'db_table': 'base_dialogmessages',
            },
        ),
        migrations.AddField(
            model_name='demonstration',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Hall', verbose_name='Место сеанса'),
        ),
        migrations.CreateModel(
            name='CurrencyRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('1', 'USD'), ('2', 'EUR'), ('3', 'AUD'), ('4', 'RUB'), ('5', 'UAH'), ('6', 'NZD')], max_length=1, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение')),
                ('by_currency', models.CharField(choices=[('1', 'USD'), ('2', 'EUR'), ('3', 'AUD'), ('4', 'RUB'), ('5', 'UAH'), ('6', 'NZD')], max_length=1, verbose_name='За 1 еденицу валюты')),
                ('date', models.DateField(verbose_name='Дата курса')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
            ],
            options={
                'db_table': 'base_currencyrate',
            },
        ),
        migrations.CreateModel(
            name='CompositionPersonRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Composition')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Person')),
                ('type', models.ManyToManyField(to='base.CompositionPersonType')),
            ],
            options={
                'db_table': 'base_compositionpersonrel',
            },
        ),
        migrations.AddField(
            model_name='composition',
            name='country',
            field=models.ManyToManyField(to='base.Country', verbose_name='Страны'),
        ),
        migrations.AddField(
            model_name='composition',
            name='media',
            field=models.ManyToManyField(to='base.Mediafiles', verbose_name='Медиафайлы'),
        ),
        migrations.AddField(
            model_name='composition',
            name='name',
            field=models.ManyToManyField(to='base.CompositionName', verbose_name='Названия'),
        ),
        migrations.AddField(
            model_name='composition',
            name='person',
            field=models.ManyToManyField(related_name='key_person_composition', through='base.CompositionPersonRel', to='base.Person', verbose_name='Персоны'),
        ),
        migrations.AddField(
            model_name='composition',
            name='tags',
            field=models.ManyToManyField(to='base.NewsTags', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='composition',
            name='text',
            field=models.ManyToManyField(to='base.News', verbose_name='Тексты, транскрипции'),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Country'),
        ),
        migrations.AddField(
            model_name='city',
            name='name',
            field=models.ManyToManyField(blank=True, null=True, to='base.NameCity', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='cinema_circuit',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.CinemaCircuit', verbose_name='Сеть кинотеатров'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='metro',
            field=models.ManyToManyField(null=True, to='base.Metro', verbose_name='Станция метро'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='name',
            field=models.ManyToManyField(blank=True, null=True, to='base.NameCinema', verbose_name='Название кинотеатара'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='phone',
            field=models.ManyToManyField(null=True, to='base.Phone', verbose_name='Номер(а) телефона(ов)'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='site',
            field=models.ManyToManyField(null=True, to='base.Site', verbose_name='Сайт(ы)'),
        ),
        migrations.AddField(
            model_name='cinema',
            name='street_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.StreetType', verbose_name='Тип улицы'),
        ),
        migrations.CreateModel(
            name='BuyTicketStatistic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата время')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.SourceSchedules', verbose_name='Сеанс')),
            ],
            options={
                'db_table': 'base_buyticketstatistic',
            },
        ),
        migrations.AddField(
            model_name='building',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='building',
            name='street',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='base.Street', verbose_name='Улица'),
        ),
        migrations.CreateModel(
            name='BoxOffice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bx_id', models.CharField(max_length=256, verbose_name='ID данных о сборах для фильма')),
                ('source_id', models.CharField(max_length=256, verbose_name='ID фильма на источнике')),
                ('name', models.CharField(max_length=256, verbose_name='Название фильма у источника')),
                ('kid', models.IntegerField(db_index=True, verbose_name='KID фильма')),
                ('screens', models.IntegerField(null=True, verbose_name='Кол-во экранов')),
                ('date_from', models.DateField(null=True, verbose_name='Дата начала')),
                ('date_to', models.DateField(null=True, verbose_name='Дата окончания')),
                ('week_sum', models.IntegerField(null=True, verbose_name='Сборы за неделю')),
                ('all_sum', models.IntegerField(null=True, verbose_name='Сборы за весь период')),
                ('week_audience', models.IntegerField(null=True, verbose_name='Зрителей за неделю')),
                ('all_audience', models.IntegerField(null=True, verbose_name='Зрителей за весь период')),
                ('days', models.IntegerField(null=True, verbose_name='Дней в прокате')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Страна')),
                ('distributor', models.ManyToManyField(related_name='box_office', to='base.Distributors', verbose_name='Дистрибьютор')),
                ('source_obj', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.ImportSources', verbose_name='Источник')),
            ],
            options={
                'db_table': 'base_boxoffice',
            },
        ),
        migrations.CreateModel(
            name='BookingSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cinemas', models.ManyToManyField(through='base.BookerCinemas', to='base.Cinema', verbose_name='Кинотеатры')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Букер')),
            ],
            options={
                'db_table': 'base_bookingsettings',
            },
        ),
        migrations.CreateModel(
            name='BookingSchedules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique', models.CharField(max_length=64, verbose_name='ID')),
                ('dtime', models.DateTimeField(db_index=True, verbose_name='Дата, время сеанса')),
                ('temp', models.BooleanField(default=False, verbose_name='Временный')),
                ('films', models.ManyToManyField(to='base.SourceFilms', verbose_name='Фильмы')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Hall', verbose_name='Зал')),
            ],
            options={
                'db_table': 'base_bookingschedules',
            },
        ),
        migrations.AddField(
            model_name='bookercinemas',
            name='cinema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Cinema'),
        ),
        migrations.AddField(
            model_name='bookercinemas',
            name='settings',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.BookingSettings'),
        ),
        migrations.CreateModel(
            name='BannedUsersAndIPs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.CharField(db_index=True, max_length=15, null=True)),
                ('dtime', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время блокировки')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profile_bannedusersandips', to='base.Profile')),
                ('who', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='who_bannedusersandips', to='base.Profile', verbose_name='Кто заблокировал')),
            ],
            options={
                'db_table': 'base_bannedusersandips',
            },
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='bg')),
                ('url', models.URLField(max_length=256, verbose_name='Сайт рекламодателя')),
                ('date_adding', models.DateTimeField(auto_now_add=True)),
                ('subdomain', models.CharField(editable=False, max_length=128, null=True, verbose_name='Субдомен')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.City', verbose_name='Таргетинг на город')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Country', verbose_name='Таргетинг на страну')),
                ('site', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'db_table': 'base_background',
            },
        ),
        migrations.CreateModel(
            name='AwardsRelations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kid', models.IntegerField(verbose_name='KID фильма')),
                ('awards', models.ManyToManyField(null=True, to='base.Awards', verbose_name='Награда')),
            ],
            options={
                'db_table': 'base_awardsrelations',
            },
        ),
        migrations.AddField(
            model_name='awards',
            name='awards',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.AwardsNames', verbose_name='Название награды/номинации'),
        ),
        migrations.AddField(
            model_name='awards',
            name='fest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.FestCompetition', verbose_name='Фестиваль'),
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Название статьи')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('text', models.TextField(verbose_name='Текст')),
                ('site', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'db_table': 'base_articles',
            },
        ),
        migrations.CreateModel(
            name='APILogger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(db_index=True, verbose_name='Дата обращения к API')),
                ('details', models.CharField(max_length=256, verbose_name='Описание')),
                ('ip', models.GenericIPAddressField(db_index=True, verbose_name='IP адрес')),
                ('method', models.CharField(max_length=32, verbose_name='Названия метода, дампа')),
                ('event', models.IntegerField(verbose_name='Код события')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'db_table': 'base_apilogger',
            },
        ),
        migrations.CreateModel(
            name='AlterStreetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256, null=True, verbose_name='Альтернативоный тип улицы')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.StreetType', verbose_name='Оригинальный тип улицы')),
            ],
            options={
                'db_table': 'base_alterstreettype',
            },
        ),
        migrations.CreateModel(
            name='AfishaCinemaRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate1', models.IntegerField()),
                ('rate2', models.IntegerField()),
                ('rate3', models.IntegerField()),
                ('rate', models.FloatField()),
                ('vnum', models.IntegerField()),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Organization')),
            ],
            options={
                'db_table': 'base_afishacinemarate',
            },
        ),
        migrations.AddField(
            model_name='actionspricelist',
            name='project',
            field=models.ForeignKey(default='1', on_delete=django.db.models.deletion.PROTECT, to='base.Projects', verbose_name='Проект'),
        ),
        migrations.AddField(
            model_name='actionspricelist',
            name='user_group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='auth.Group', verbose_name='Группа пользователей'),
        ),
        migrations.CreateModel(
            name='ActionsLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dtime', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('object', models.CharField(choices=[('0', 'Другое'), ('1', 'Организация'), ('2', 'Персона'), ('3', 'Фильм'), ('4', 'Меню'), ('5', 'ПодМеню'), ('6', 'Блог'), ('7', 'Галерея'), ('8', 'Работа'), ('9', 'События'), ('10', 'Клиенты'), ('11', 'Реклама')], max_length=2, verbose_name='Объект')),
                ('object_id', models.IntegerField(verbose_name='ID объекта')),
                ('action', models.CharField(choices=[('1', 'добавл.'), ('2', 'измен.'), ('3', 'удал.'), ('4', 'Кнопка Приглашения')], max_length=1, verbose_name='Действие')),
                ('attributes', models.CharField(max_length=256, null=True, verbose_name='Измененные свойства объекта')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='base.Profile', verbose_name='Профиль пользователя')),
                ('site', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.PROTECT, to='sites.Site', verbose_name='Сайт')),
            ],
            options={
                'db_table': 'base_actionslog',
            },
        ),
    ]
